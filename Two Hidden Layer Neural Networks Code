import numpy as np
import matplotlib.pyplot as plt
import plygdata as pg
import json

#np.random.seed(1) # set a seed so that the results are consistent

file=open("data2.txt","r")
data=json.load(file)
file.close()
d = np.array(data["1"])
X = d[:, 0:2].T  # shape 2x500
Y = np.reshape(d[:, 2], (1, 500))  # shape 1x500
"""
for i in range(500):
    if Y[0,i]==1:
        plt.scatter(X[0,i],X[1,i],color='blue')
    else:
        plt.scatter(X[0,i], X[1,i], color='red')

plt.title('XOR PROBLEMÄ°')
plt.xlabel('x2')
plt.ylabel('x1')
plt.show()
"""
def layer_sizes(X, Y):

    n_x = X.shape[0]  # size of input layer
    n_h = 4
    n_h2=4
    n_y = Y.shape[0]  # size of output layer
    return (n_x, n_h, n_y)


# GRADED FUNCTION: initialize_parameters
def initialize_parameters(n_x, n_h,n_h2, n_y):

    #np.random.seed(2)  # we set up a seed so that your output matches ours although the initialization is random.
    W1 =np.random.randn(n_h, n_x) * 0.01
    W1=np.array(W1, dtype='f')
    b1 = np.zeros(shape=(n_h, 1))

    #np.random.seed(3)
    W2 = np.random.randn(n_h2, n_h) * 0.01
    W2 = np.array(W2, dtype='f')
    b2 = np.zeros(shape=(n_h2, 1))

    W3=np.random.rand(n_y,n_h2)*0.01
    W3 = np.array(W3, dtype='f')
    b3=np.zeros((n_y,1))

    assert (W1.shape == (n_h, n_x))
    assert (b1.shape == (n_h, 1))
    assert (W2.shape == (n_h2, n_h))
    assert (b2.shape == (n_h2, 1))
    assert (W3.shape == (n_y,n_h2))
    assert (b3.shape == (n_y, 1))
    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2,
                  "W3": W3,
                  "b3": b3}
    print(parameters)
    return parameters


# GRADED FUNCTION: forward_propagation

def sigmoid(x):
    return 1/(1+np.exp(-x))

def relu(x):
    return np.maximum(0,x)

def reluDerivative(x):
    x[x <= 0] = 0
    x[x > 0] = 1
    return x

def forward_propagation(X, parameters):

    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    W3 = parameters['W3']
    b3 = parameters['b3']

    Z1 = np.dot(W1, X) + b1
    A1 = relu(Z1)
    Z2 = np.dot(W2, A1) + b2
    A2 = relu(Z2)
    Z3 = np.dot(W3, A2) + b3
    A3 = sigmoid(Z3)

    assert (A3.shape == (1, X.shape[1]))

    cache = {"Z1": Z1,
             "A1": A1,
             "Z2": Z2,
             "A2": A2,
             "Z3": Z3,
             "A3": A3,
             }

    return A3, cache

# GRADED FUNCTION: compute_cost

def compute_cost(A3, Y, parameters):


    m = Y.shape[1]  # number of example


    W1 = parameters['W1']
    W2 = parameters['W2']
    W3 = parameters['W3']

    zero = (1 - A3)
    for i in range(0, 500):
        if zero[0, i] == 0:
            zero[0, i] = 1

    logprobs = np.multiply(np.log(A3), Y) + np.multiply((1 - Y), np.log(zero))
    cost = - np.sum(logprobs) / m

    cost = np.squeeze(cost)  # makes sure cost is the dimension we expect.

    assert (isinstance(cost, float))

    return cost


def backward_propagation(parameters, cache, X, Y):

    m = X.shape[1]

    W1 = parameters['W1']
    W2 = parameters['W2']
    W3 = parameters['W3']

    A1 = cache['A1']
    A2 = cache['A2']
    A3 = cache['A3']

    dZ3 = A3 - Y
    dW3 = (1 / m) * np.dot(dZ3, A2.T)
    db3 = (1 / m) * np.sum(dZ3, axis=1, keepdims=True)

    dZ2 = np.multiply(np.dot(W3.T, dZ3), reluDerivative(A2))
    dW2 = (1 / m) * np.dot(dZ2, A1.T)
    db2 = (1 / m) * np.sum(dZ2, axis=1, keepdims=True)

    dZ1 = np.multiply(np.dot(W2.T, dZ2), reluDerivative(A1))
    dW1 = (1 / m) * np.dot(dZ1, X.T)
    db1 = (1 / m) * np.sum(dZ1, axis=1, keepdims=True)

    grads = {"dW1": dW1,
             "db1": db1,
             "dW2": dW2,
             "db2": db2,
             "dW3": dW3,
             "db3": db3}

    return grads

def update_parameters(parameters, grads, learning_rate=0.1):

    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    W3 = parameters['W3']
    b3 = parameters['b3']

    dW1 = grads['dW1']
    db1 = grads['db1']
    dW2 = grads['dW2']
    db2 = grads['db2']
    dW3 = grads['dW3']
    db3 = grads['db3']

    W1 = W1 - learning_rate * dW1
    b1 = b1 - learning_rate * db1
    W2 = W2 - learning_rate * dW2
    b2 = b2 - learning_rate * db2
    W3 = W3 - learning_rate * dW3
    b3 = b3 - learning_rate * db3

    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2,
                  "W3": W3,
                  "b3": b3}

    return parameters

# GRADED FUNCTION: nn_model

def nn_model(X, Y, n_h,n_h2, num_iterations=1000, print_cost=False):

    #np.random.seed(3)
    n_x = layer_sizes(X, Y)[0]
    n_y = layer_sizes(X, Y)[2]

    parameters = initialize_parameters(n_x, n_h, n_h2, n_y)

    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    W3 = parameters['W3']
    b3 = parameters['b3']

    # Loop (gradient descent)
    for i in range(0, num_iterations):

        # Forward propagation. Inputs: "X, parameters". Outputs: "A2, cache".
        A3, cache = forward_propagation(X, parameters)

        # Cost function. Inputs: "A2, Y, parameters". Outputs: "cost".
        cost = compute_cost(A3, Y, parameters)

        # Backpropagation. Inputs: "parameters, cache, X, Y". Outputs: "grads".
        grads = backward_propagation(parameters, cache, X, Y)

        # Gradient descent parameter update. Inputs: "parameters, grads". Outputs: "parameters".
        parameters = update_parameters(parameters, grads)

        # Print the cost every 1 iterations
        if print_cost and i % 1 == 0:
            print("Cost after iteration %i: %f" % (i, cost))

    return parameters


# GRADED FUNCTION: predict
def predict(parameters, X):

    A3, cache = forward_propagation(X, parameters)
    predictions = np.round(A3)

    return predictions

def plot_decision_boundary():
    xx = np.linspace(-11, 11, 1000)  # bounds of data
    yy = np.linspace(-11, 11, 1000)

    X11 = []
    X22 = []
    pred = []
    x_grit = np.zeros((2, 1))
    for point1 in xx:
        for point2 in yy:
            X11.append(point1)
            X22.append(point2)
            x_grit[0, 0] = point1
            x_grit[1, 0] = point2
            pred.append(predict(parameters, x_grit).reshape(1, -1))  # getting predictions across each point

    pred = np.reshape(pred, 1000000)
    pred = pred.tolist()
    #print("ty", np.shape(X11), np.shape(X22), np.shape(pred))

    f, ax1 = plt.subplots(figsize=(8, 6))

    ax1.scatter(X11, X22, c=pred, s=50, linewidth=1)

    ax1.scatter(X[0, :], X[1, :], c=Y[0,:], s=50,
                cmap="RdBu", vmin=-.2, vmax=1.2,
                edgecolor="white", linewidth=1)

    ax1.set(aspect="equal",
             xlim=(-6, 6), ylim=(-6, 6),
             xlabel="$X_1$", ylabel="$X_2$")

    ax1.get_figure()
    plt.show()

parameters = nn_model(X, Y, n_h = 15,n_h2=15, num_iterations=5000, print_cost=True)
plot_decision_boundary()

# Print accuracy
predictions = predict(parameters, X)
print('Accuracy: %d' % float((np.dot(Y, predictions.T) + np.dot(1 - Y, 1 - predictions.T)) / float(Y.size) * 100) + '%')
print("W1 = " + str(parameters["W1"]))
print("b1 = " + str(parameters["b1"]))
print("W2 = " + str(parameters["W2"]))
print("b2 = " + str(parameters["b2"]))
