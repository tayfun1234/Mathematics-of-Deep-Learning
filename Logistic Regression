import numpy as np
import matplotlib.pyplot as plt
import json


file=open("data2.txt","r")
data=json.load(file)
file.close()
d = np.array(data["1"])
X = d[:, 0:2]  # shape 500x2
y = d[:, 2]  # shape 500,

print(X.shape)
print(y.shape)

plt.figure(figsize=(10, 6))
plt.scatter(X[y == 0][:, 0], X[y == 0][:, 1], color='r', label='1')
plt.scatter(X[y == 1][:, 0], X[y == 1][:, 1], color='b', label='0')
plt.legend()

class LogisticRegression:
    def __init__(self, lr=0.1, num_iter=100000, fit_intercept=True, verbose=False):
        self.lr = lr
        self.num_iter = num_iter
        self.fit_intercept = fit_intercept
        self.verbose = verbose

    def __add_intercept(self, X):
        intercept = np.ones((X.shape[0], 1))
        return np.concatenate((intercept, X), axis=1)

    def __sigmoid(self, z):
        return 1 / (1 + np.exp(-z))

    def __loss(self, h, y):
        return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()

    def fit(self, X, y):
        if self.fit_intercept:
            X = self.__add_intercept(X)

        # weights initialization
        self.theta = np.zeros(X.shape[1])

        for i in range(self.num_iter):
            z = np.dot(X, self.theta)
            h = self.__sigmoid(z)
            gradient = np.dot(X.T, (h - y)) / y.size
            self.theta -= self.lr * gradient

            z = np.dot(X, self.theta)
            h = self.__sigmoid(z)
            loss = self.__loss(h, y)

            if (self.verbose == True and i % 10000 == 0):
                print(f'loss: {loss} \t')

    def predict_prob(self, X):
        if self.fit_intercept:
            X = self.__add_intercept(X)

        return self.__sigmoid(np.dot(X, self.theta))

    def predict(self, X):
        return self.predict_prob(X).round()


model = LogisticRegression(lr=0.1, num_iter=300000)


model.fit(X, y)

preds = model.predict(X)
(preds == y).mean()

model.theta

plt.figure(figsize=(10, 6))
plt.scatter(X[y == 0][:, 0], X[y == 0][:, 1], color='r', label='1')
plt.scatter(X[y == 1][:, 0], X[y == 1][:, 1], color='b', label='0')
plt.legend()
plt.title('XOR PROBLEMİ')
plt.xlabel('x2')
plt.ylabel('x1')
x1_min, x1_max = X[:,0].min(), X[:,0].max(),
x2_min, x2_max = X[:,1].min(), X[:,1].max(),
xx1, xx2 = np.meshgrid(np.linspace(x1_min, x1_max), np.linspace(x2_min, x2_max))
grid = np.c_[xx1.ravel(), xx2.ravel()]
probs = model.predict_prob(grid).reshape(xx1.shape)
#plt.contour(xx1, xx2, probs, [0.5], linewidths=1, colors='black');

f, ax1 = plt.subplots(figsize=(8, 6))
ax1.scatter(xx1, xx2, c=probs, s=50, linewidth=1)
ax1.scatter(X[:, 0], X[:, 1], c=y[:], s=50,
                cmap="RdBu", vmin=-.2, vmax=1.2,
                edgecolor="white", linewidth=1)

ax1.set(aspect="equal",
             xlim=(-7, 7), ylim=(-7, 7),
             xlabel="$X_1$", ylabel="$X_2$")

ax1.get_figure()
plt.title('XOR Verisi Kümesi İçin Lojistik Regresyon')
plt.xlabel('x2')
plt.ylabel('x1')
plt.show()
